
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 26 23:47:07 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 26 23:47:07 COT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\006\005\000\002\002\004\000\002\011" +
    "\011\000\002\007\003\000\002\007\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\006\000\002\011\004\000" +
    "\002\012\005\000\002\012\007\000\002\012\004\000\002" +
    "\012\006\000\002\010\005\000\002\010\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\005\000\002\005\003" +
    "\000\002\002\005\000\002\002\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\022\005\001\002\000\004\002\067\001" +
    "\002\000\014\005\013\013\007\020\010\024\011\025\012" +
    "\001\002\000\004\023\066\001\002\000\004\006\056\001" +
    "\002\000\004\005\036\001\002\000\006\005\044\026\043" +
    "\001\002\000\004\005\036\001\002\000\004\016\014\001" +
    "\002\000\010\004\015\005\023\006\022\001\002\000\014" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\017\uffec\001\002\000" +
    "\014\007\uffed\010\uffed\011\uffed\012\uffed\017\uffed\001\002" +
    "\000\006\010\026\017\034\001\002\000\010\007\ufff1\010" +
    "\ufff1\017\ufff1\001\002\000\014\007\uffef\010\uffef\011\030" +
    "\012\031\017\uffef\001\002\000\010\004\015\005\023\006" +
    "\022\001\002\000\014\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\017\uffeb\001\002\000\006\007\025\010\026\001\002\000" +
    "\014\007\uffea\010\uffea\011\uffea\012\uffea\017\uffea\001\002" +
    "\000\010\004\015\005\023\006\022\001\002\000\010\007" +
    "\ufff2\010\ufff2\017\ufff2\001\002\000\010\004\015\005\023" +
    "\006\022\001\002\000\010\004\015\005\023\006\022\001" +
    "\002\000\014\007\uffee\010\uffee\011\uffee\012\uffee\017\uffee" +
    "\001\002\000\012\007\ufff0\010\ufff0\012\031\017\ufff0\001" +
    "\002\000\020\005\ufffa\013\ufffa\015\ufffa\020\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\001\002\000\020\005\ufffc\013\ufffc\015" +
    "\ufffc\020\ufffc\023\ufffc\024\ufffc\025\ufffc\001\002\000\006" +
    "\017\037\021\040\001\002\000\020\005\ufff3\013\ufff3\015" +
    "\ufff3\020\ufff3\023\ufff3\024\ufff3\025\ufff3\001\002\000\004" +
    "\005\036\001\002\000\020\005\ufff4\013\ufff4\015\ufff4\020" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\001\002\000\020\005\ufffb" +
    "\013\ufffb\015\ufffb\020\ufffb\023\ufffb\024\ufffb\025\ufffb\001" +
    "\002\000\004\005\050\001\002\000\006\017\045\021\046" +
    "\001\002\000\020\005\ufff6\013\ufff6\015\ufff6\020\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\001\002\000\006\005\044\026\043" +
    "\001\002\000\020\005\ufff8\013\ufff8\015\ufff8\020\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\001\002\000\004\026\051\001\002" +
    "\000\006\017\052\021\053\001\002\000\020\005\ufff5\013" +
    "\ufff5\015\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002" +
    "\000\006\005\044\026\043\001\002\000\020\005\ufff7\013" +
    "\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7\025\ufff7\001\002" +
    "\000\020\005\ufff9\013\ufff9\015\ufff9\020\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\001\002\000\010\004\015\005\023\006\022" +
    "\001\002\000\006\007\060\010\026\001\002\000\004\014" +
    "\061\001\002\000\014\005\013\013\007\020\010\024\011" +
    "\025\012\001\002\000\016\005\013\013\007\015\ufffe\020" +
    "\010\024\011\025\012\001\002\000\004\015\064\001\002" +
    "\000\020\005\uffff\013\uffff\015\uffff\020\uffff\023\uffff\024" +
    "\uffff\025\uffff\001\002\000\004\015\ufffd\001\002\000\004" +
    "\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\006\003\001\001\000\002\001\001\000" +
    "\004\011\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\054\001\001\000\004\012\041\001\001\000" +
    "\004\010\034\001\001\000\002\001\001\000\012\002\020" +
    "\003\015\004\016\005\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\020\003\015\004\023\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\020\003\015\005\026\001\001\000\002\001" +
    "\001\000\006\002\032\003\015\001\001\000\004\003\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\020\003\015\004\056\005\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\062\011\061\001\001\000" +
    "\006\007\064\011\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error (Symbol x){
        errsin+="\nError Sintaxis en pos " + (x.left+1) + "," + (x.right+1);
        throw new UnsupportedOperationException (errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T ::= pi EL pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E op T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EA ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EA ::= E or E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EL ::= EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EL ::= EL ol EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VA ::= id pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VA ::= id c VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // K ::= comilla id comilla pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // K ::= id pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // K ::= comilla id comilla c K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // K ::= id c K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L ::= tipo VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L ::= id asig EL pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L ::= escribir K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L ::= leer VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IS ::= L IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IS ::= L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= mientras pi EL pd hacer IS finmientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // I ::= inicio L fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

