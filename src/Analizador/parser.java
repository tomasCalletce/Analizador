
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 30 20:55:02 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 30 20:55:02 COT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\006\006\000\002\002\004\000\002\007" +
    "\003\000\002\007\004\000\002\011\011\000\002\011\011" +
    "\000\002\015\005\000\002\015\003\000\002\011\004\000" +
    "\002\011\004\000\002\011\006\000\002\011\004\000\002" +
    "\011\011\000\002\016\006\000\002\016\004\000\002\011" +
    "\011\000\002\013\004\000\002\013\005\000\002\014\004" +
    "\000\002\014\003\000\002\012\004\000\002\012\004\000" +
    "\002\017\004\000\002\017\003\000\002\010\005\000\002" +
    "\010\004\000\002\004\005\000\002\004\003\000\002\005" +
    "\005\000\002\005\003\000\002\002\005\000\002\002\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\022\005\001\002\000\004\002\133\001" +
    "\002\000\004\005\006\001\002\000\022\005\010\013\013" +
    "\020\016\024\007\025\014\026\011\032\020\036\012\001" +
    "\002\000\006\005\125\042\124\001\002\000\004\016\120" +
    "\001\002\000\004\006\106\001\002\000\004\005\071\001" +
    "\002\000\004\006\063\001\002\000\004\005\055\001\002" +
    "\000\042\005\010\013\013\015\uffff\020\016\023\uffff\024" +
    "\007\025\014\026\011\030\uffff\031\uffff\032\020\034\uffff" +
    "\036\012\037\uffff\040\uffff\041\uffff\001\002\000\004\005" +
    "\055\001\002\000\004\023\053\001\002\000\004\005\021" +
    "\001\002\000\004\016\022\001\002\000\010\004\024\005" +
    "\026\006\025\001\002\000\004\033\042\001\002\000\040" +
    "\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\017" +
    "\uffe1\020\uffe1\024\uffe1\025\uffe1\026\uffe1\032\uffe1\033\uffe1" +
    "\035\uffe1\036\uffe1\001\002\000\010\004\024\005\026\006" +
    "\025\001\002\000\040\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\017\uffe0\020\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\001\002\000\014" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\017\uffe2\001\002\000" +
    "\010\007\uffe6\010\uffe6\017\uffe6\001\002\000\006\007\037" +
    "\010\040\001\002\000\014\007\uffe4\010\uffe4\011\033\012" +
    "\034\017\uffe4\001\002\000\010\004\024\005\026\006\025" +
    "\001\002\000\010\004\024\005\026\006\025\001\002\000" +
    "\014\007\uffe3\010\uffe3\011\uffe3\012\uffe3\017\uffe3\001\002" +
    "\000\012\007\uffe5\010\uffe5\012\034\017\uffe5\001\002\000" +
    "\040\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\017\uffdf\020\uffdf\024\uffdf\025\uffdf\026\uffdf\032\uffdf\033" +
    "\uffdf\035\uffdf\036\uffdf\001\002\000\010\004\024\005\026" +
    "\006\025\001\002\000\010\007\uffe7\010\uffe7\017\uffe7\001" +
    "\002\000\010\004\024\005\026\006\025\001\002\000\024" +
    "\005\010\013\013\020\016\024\007\025\014\026\011\032" +
    "\020\035\044\036\012\001\002\000\010\004\024\005\026" +
    "\006\025\001\002\000\042\005\ufff5\013\ufff5\015\ufff5\020" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\001" +
    "\002\000\004\034\047\001\002\000\042\005\ufff3\013\ufff3" +
    "\015\ufff3\020\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\001\002\000\022\005\010\013\013\020\016\024" +
    "\007\025\014\026\011\032\020\036\012\001\002\000\004" +
    "\034\052\001\002\000\042\005\ufff4\013\ufff4\015\ufff4\020" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\001" +
    "\002\000\004\002\001\001\002\000\042\005\ufff6\013\ufff6" +
    "\015\ufff6\020\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\001\002\000\006\017\056\021\057\001\002\000" +
    "\042\005\uffe8\013\uffe8\015\uffe8\020\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002\000\004\005\055" +
    "\001\002\000\042\005\uffe9\013\uffe9\015\uffe9\020\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\022\015\ufffe\023\ufffe\030\ufffe\031\ufffe\034\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\001\002\000\042\005\ufff9\013\ufff9\015" +
    "\ufff9\020\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\034\ufff9\036\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\001\002\000\010\004\024\005\026\006\025\001\002" +
    "\000\006\007\065\010\040\001\002\000\004\014\066\001" +
    "\002\000\022\005\010\013\013\020\016\024\007\025\014" +
    "\026\011\032\020\036\012\001\002\000\004\015\070\001" +
    "\002\000\042\005\ufffd\013\ufffd\015\ufffd\020\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\032\ufffd\034" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\001\002\000\004" +
    "\014\072\001\002\000\004\041\073\001\002\000\022\005" +
    "\010\013\013\020\016\024\007\025\014\026\011\032\020" +
    "\036\012\001\002\000\006\037\076\041\077\001\002\000" +
    "\004\040\105\001\002\000\004\043\103\001\002\000\022" +
    "\005\010\013\013\020\016\024\007\025\014\026\011\032" +
    "\020\036\012\001\002\000\004\040\ufff1\001\002\000\010" +
    "\037\076\040\uffee\041\077\001\002\000\004\040\uffef\001" +
    "\002\000\022\005\010\013\013\020\016\024\007\025\014" +
    "\026\011\032\020\036\012\001\002\000\004\040\ufff0\001" +
    "\002\000\042\005\ufff2\013\ufff2\015\ufff2\020\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\034" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002\000\010" +
    "\004\024\005\026\006\025\001\002\000\006\007\110\010" +
    "\040\001\002\000\004\027\111\001\002\000\022\005\010" +
    "\013\013\020\016\024\007\025\014\026\011\032\020\036" +
    "\012\001\002\000\006\030\113\031\114\001\002\000\022" +
    "\005\010\013\013\020\016\024\007\025\014\026\011\032" +
    "\020\036\012\001\002\000\042\005\ufffa\013\ufffa\015\ufffa" +
    "\020\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\001\002\000\042\005\ufffc\013\ufffc\015\ufffc\020\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\034\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\001\002\000" +
    "\004\031\117\001\002\000\042\005\ufffb\013\ufffb\015\ufffb" +
    "\020\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\034\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\001\002\000\010\004\024\005\026\006\025\001\002\000" +
    "\006\010\040\017\122\001\002\000\042\005\ufff7\013\ufff7" +
    "\015\ufff7\020\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\001\002\000\042\005\ufff8\013\ufff8\015\ufff8\020" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\001" +
    "\002\000\006\017\126\021\127\001\002\000\006\017\126" +
    "\021\127\001\002\000\042\005\uffea\013\uffea\015\uffea\020" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea" +
    "\032\uffea\034\uffea\036\uffea\037\uffea\040\uffea\041\uffea\001" +
    "\002\000\006\005\125\042\124\001\002\000\042\005\uffec" +
    "\013\uffec\015\uffec\020\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\030\uffec\031\uffec\032\uffec\034\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\001\002\000\042\005\uffeb\013\uffeb\015" +
    "\uffeb\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\001\002\000\042\005\uffed\013\uffed\015\uffed\020\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed\032" +
    "\uffed\034\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\006\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\016\011\014\001\001\000\004" +
    "\012\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\061\001\001" +
    "\000\006\007\060\011\014\001\001\000\004\010\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\031\003\026\004\030\005\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\035\003\026" +
    "\001\001\000\004\003\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\031\003\026" +
    "\005\040\001\001\000\002\001\001\000\004\003\042\001" +
    "\001\000\010\007\045\011\014\016\044\001\001\000\004" +
    "\003\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\050\011\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\031\003\026\004\063\005\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\066\011" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\073\011\014\001" +
    "\001\000\004\013\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\100\011\014\014\077\001\001\000" +
    "\002\001\001\000\004\013\101\001\001\000\002\001\001" +
    "\000\006\007\103\011\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\031\003\026\004\106\005\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\111\011\014\001\001\000\004\015\114\001\001\000\006" +
    "\007\115\011\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\031" +
    "\003\026\004\120\005\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\131\001\001" +
    "\000\004\017\127\001\001\000\002\001\001\000\004\012" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error (Symbol x){
        errsin+="\nError Sintaxis en pos " + (x.left+1) + "," + (x.right+1);
        throw new UnsupportedOperationException (errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // T ::= pi EL pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // T ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E op T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EA ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EA ::= E or E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EL ::= EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EL ::= EL ol EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VA ::= id pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VA ::= id c VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // X ::= pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // X ::= c K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // K ::= id X 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // K ::= alfa X 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // J ::= IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // J ::= IS W 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // W ::= deotromodo puntos IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("W",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // W ::= caso J 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("W",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L ::= segun id hacer caso IS W finsegun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // M ::= IS finpara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // M ::= paso T IS finpara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L ::= para id asig T hasta T M 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L ::= tipo VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L ::= id asig EL pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L ::= escribir K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L ::= leer VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= finsi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C ::= sino IS finsi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L ::= si pi EL pd entonces IS C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= mientras pi EL pd hacer IS finmientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IS ::= L IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IS ::= L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // I ::= inicio id IS fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

