
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 27 01:18:51 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 27 01:18:51 COT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\006\005\000\002\002\004\000\002\007" +
    "\003\000\002\007\004\000\002\011\011\000\002\011\013" +
    "\000\002\011\011\000\002\011\004\000\002\011\004\000" +
    "\002\011\006\000\002\011\004\000\002\011\014\000\002" +
    "\011\012\000\002\011\012\000\002\013\006\000\002\013" +
    "\005\000\002\013\004\000\002\012\005\000\002\012\007" +
    "\000\002\012\004\000\002\012\006\000\002\010\005\000" +
    "\002\010\004\000\002\004\005\000\002\004\003\000\002" +
    "\005\005\000\002\005\003\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\022\005\001\002\000\004\002\133\001" +
    "\002\000\022\005\007\013\012\020\015\024\006\025\013" +
    "\027\010\033\017\037\011\001\002\000\006\005\122\026" +
    "\121\001\002\000\004\016\115\001\002\000\004\006\104" +
    "\001\002\000\004\005\067\001\002\000\004\006\061\001" +
    "\002\000\004\005\053\001\002\000\042\004\uffff\005\007" +
    "\013\012\015\uffff\020\015\023\uffff\024\006\025\013\027" +
    "\010\031\uffff\032\uffff\033\017\035\uffff\037\011\040\uffff" +
    "\041\uffff\001\002\000\004\005\053\001\002\000\004\023" +
    "\051\001\002\000\004\005\020\001\002\000\004\016\021" +
    "\001\002\000\010\004\022\005\025\006\024\001\002\000" +
    "\042\005\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\017\uffe4\020\uffe4\024\uffe4\025\uffe4\027\uffe4\033\uffe4\034" +
    "\uffe4\036\uffe4\037\uffe4\042\uffe4\001\002\000\004\034\041" +
    "\001\002\000\010\004\022\005\025\006\024\001\002\000" +
    "\042\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\017\uffe3\020\uffe3\024\uffe3\025\uffe3\027\uffe3\033\uffe3\034" +
    "\uffe3\036\uffe3\037\uffe3\042\uffe3\001\002\000\014\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\017\uffe5\001\002\000\010\007" +
    "\uffe9\010\uffe9\017\uffe9\001\002\000\006\007\036\010\037" +
    "\001\002\000\014\007\uffe7\010\uffe7\011\032\012\033\017" +
    "\uffe7\001\002\000\010\004\022\005\025\006\024\001\002" +
    "\000\010\004\022\005\025\006\024\001\002\000\014\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\017\uffe6\001\002\000\012" +
    "\007\uffe8\010\uffe8\012\033\017\uffe8\001\002\000\042\005" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2" +
    "\020\uffe2\024\uffe2\025\uffe2\027\uffe2\033\uffe2\034\uffe2\036" +
    "\uffe2\037\uffe2\042\uffe2\001\002\000\010\004\022\005\025" +
    "\006\024\001\002\000\010\007\uffea\010\uffea\017\uffea\001" +
    "\002\000\010\004\022\005\025\006\024\001\002\000\024" +
    "\005\007\013\012\020\015\024\006\025\013\027\010\033" +
    "\017\036\043\037\011\001\002\000\010\004\022\005\025" +
    "\006\024\001\002\000\004\035\045\001\002\000\042\004" +
    "\ufff5\005\ufff5\013\ufff5\015\ufff5\020\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\027\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\001\002\000\022\005\007\013\012" +
    "\020\015\024\006\025\013\027\010\033\017\037\011\001" +
    "\002\000\004\035\050\001\002\000\042\004\ufff6\005\ufff6" +
    "\013\ufff6\015\ufff6\020\ufff6\023\ufff6\024\ufff6\025\ufff6\027" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\001\002\000\004\002\001\001\002\000\042\004" +
    "\ufff7\005\ufff7\013\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\001\002\000\006\017\054\021\055" +
    "\001\002\000\042\004\uffeb\005\uffeb\013\uffeb\015\uffeb\020" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002\000" +
    "\004\005\053\001\002\000\042\004\uffec\005\uffec\013\uffec" +
    "\015\uffec\020\uffec\023\uffec\024\uffec\025\uffec\027\uffec\031" +
    "\uffec\032\uffec\033\uffec\035\uffec\037\uffec\040\uffec\041\uffec" +
    "\001\002\000\022\004\ufffe\015\ufffe\023\ufffe\031\ufffe\032" +
    "\ufffe\035\ufffe\040\ufffe\041\ufffe\001\002\000\042\004\ufffa" +
    "\005\ufffa\013\ufffa\015\ufffa\020\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\001\002\000\010\004\022\005\025\006" +
    "\024\001\002\000\006\007\063\010\037\001\002\000\004" +
    "\014\064\001\002\000\022\005\007\013\012\020\015\024" +
    "\006\025\013\027\010\033\017\037\011\001\002\000\004" +
    "\015\066\001\002\000\042\004\ufffd\005\ufffd\013\ufffd\015" +
    "\ufffd\020\ufffd\023\ufffd\024\ufffd\025\ufffd\027\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\035\ufffd\037\ufffd\040\ufffd\041\ufffd\001" +
    "\002\000\004\014\070\001\002\000\010\004\022\005\025" +
    "\006\024\001\002\000\004\042\072\001\002\000\022\005" +
    "\007\013\012\020\015\024\006\025\013\027\010\033\017" +
    "\037\011\001\002\000\006\004\075\040\076\001\002\000" +
    "\004\041\103\001\002\000\004\042\100\001\002\000\022" +
    "\005\007\013\012\020\015\024\006\025\013\027\010\033" +
    "\017\037\011\001\002\000\004\041\ufff1\001\002\000\022" +
    "\005\007\013\012\020\015\024\006\025\013\027\010\033" +
    "\017\037\011\001\002\000\010\004\075\040\076\041\ufff2" +
    "\001\002\000\004\041\ufff3\001\002\000\042\004\ufff4\005" +
    "\ufff4\013\ufff4\015\ufff4\020\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\027\ufff4\031\ufff4\032\ufff4\033\ufff4\035\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\001\002\000\010\004\022\005\025\006\024" +
    "\001\002\000\006\007\106\010\037\001\002\000\004\030" +
    "\107\001\002\000\022\005\007\013\012\020\015\024\006" +
    "\025\013\027\010\033\017\037\011\001\002\000\006\031" +
    "\111\032\112\001\002\000\022\005\007\013\012\020\015" +
    "\024\006\025\013\027\010\033\017\037\011\001\002\000" +
    "\042\004\ufffb\005\ufffb\013\ufffb\015\ufffb\020\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\035" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002\000\004\032\114" +
    "\001\002\000\042\004\ufffc\005\ufffc\013\ufffc\015\ufffc\020" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\035\ufffc\037\ufffc\040\ufffc\041\ufffc\001\002\000" +
    "\010\004\022\005\025\006\024\001\002\000\006\010\037" +
    "\017\117\001\002\000\042\004\ufff8\005\ufff8\013\ufff8\015" +
    "\ufff8\020\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\001" +
    "\002\000\042\004\ufff9\005\ufff9\013\ufff9\015\ufff9\020\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\027\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\035\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000\004" +
    "\005\126\001\002\000\006\017\123\021\124\001\002\000" +
    "\042\004\uffee\005\uffee\013\uffee\015\uffee\020\uffee\023\uffee" +
    "\024\uffee\025\uffee\027\uffee\031\uffee\032\uffee\033\uffee\035" +
    "\uffee\037\uffee\040\uffee\041\uffee\001\002\000\006\005\122" +
    "\026\121\001\002\000\042\004\ufff0\005\ufff0\013\ufff0\015" +
    "\ufff0\020\ufff0\023\ufff0\024\ufff0\025\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0\001" +
    "\002\000\004\026\127\001\002\000\006\017\130\021\131" +
    "\001\002\000\042\004\uffed\005\uffed\013\uffed\015\uffed\020" +
    "\uffed\023\uffed\024\uffed\025\uffed\027\uffed\031\uffed\032\uffed" +
    "\033\uffed\035\uffed\037\uffed\040\uffed\041\uffed\001\002\000" +
    "\006\005\122\026\121\001\002\000\042\004\uffef\005\uffef" +
    "\013\uffef\015\uffef\020\uffef\023\uffef\024\uffef\025\uffef\027" +
    "\uffef\031\uffef\032\uffef\033\uffef\035\uffef\037\uffef\040\uffef" +
    "\041\uffef\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\006\003\001\001\000\002\001\001\000" +
    "\006\007\015\011\013\001\001\000\004\012\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\057\001\001\000\006\007\056" +
    "\011\013\001\001\000\004\010\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\030\003\025\004\027\005\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\034\003\025\001\001\000\004" +
    "\003\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\030\003\025\005\037\001\001" +
    "\000\002\001\001\000\004\003\041\001\001\000\006\007" +
    "\043\011\013\001\001\000\004\003\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\046\011\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\030\003\025\004\061\005" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\064\011\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\070\001\001\000\002" +
    "\001\001\000\006\007\072\011\013\001\001\000\004\013" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\076\011\013\001\001\000\002\001\001\000\006\007" +
    "\100\011\013\001\001\000\004\013\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\030\003\025\004" +
    "\104\005\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\107\011\013\001\001\000\002\001\001\000" +
    "\006\007\112\011\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\030\003\025\004" +
    "\115\005\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\131\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error (Symbol x){
        errsin+="\nError Sintaxis en pos " + (x.left+1) + "," + (x.right+1);
        throw new UnsupportedOperationException (errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T ::= pi EL pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E op T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EA ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EA ::= E or E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EL ::= EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EL ::= EL ol EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VA ::= id pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VA ::= id c VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // K ::= comilla id comilla pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // K ::= id pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // K ::= comilla id comilla c K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // K ::= id c K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // W ::= deotromodo IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("W",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // W ::= num puntos IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("W",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // W ::= num puntos IS W 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("W",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L ::= segun id hacer T puntos IS W finsegun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L ::= para id asig T hasta T IS finpara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L ::= para id asig T hasta T paso T IS finpara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L ::= tipo VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L ::= id asig EL pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L ::= escribir K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L ::= leer VA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L ::= si pi EL pd entonces IS finsi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L ::= si pi EL pd entonces IS sino IS finsi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= mientras pi EL pd hacer IS finmientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IS ::= L IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IS ::= L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // I ::= inicio IS fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

